<?xml version="1.0" encoding="UTF-8"?><sqlb_project><db path="db_biblioteca.db" readonly="0" foreign_keys="1" case_sensitive_like="0" temp_store="0" wal_autocheckpoint="1000" synchronous="2"/><attached/><window><main_tabs open="structure browser pragmas query" current="3"/></window><tab_structure><column_width id="0" width="300"/><column_width id="1" width="0"/><column_width id="2" width="100"/><column_width id="3" width="2055"/><column_width id="4" width="0"/><expanded_item id="0" parent="1"/><expanded_item id="1" parent="1"/><expanded_item id="2" parent="1"/><expanded_item id="3" parent="1"/></tab_structure><tab_browse><table title="sqlite_sequence" custom_title="0" dock_id="2" table="4,15:mainsqlite_sequence"/><dock_state state="000000ff00000000fd00000001000000020000077400000386fc0100000002fb000000160064006f0063006b00420072006f00770073006500310100000000000007740000000000000000fb000000160064006f0063006b00420072006f00770073006500320100000000000007740000011900ffffff000007740000000000000004000000040000000800000008fc00000000"/><default_encoding codec=""/><browse_table_settings><table schema="main" name="sqlite_sequence" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_" freeze_columns="0"><sort/><column_widths><column index="1" value="124"/><column index="2" value="31"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table></browse_table_settings></tab_browse><tab_sql><sql name="SQL 1*">-- scripts de la creacion de la db 

CREATE TABLE IF NOT EXISTS tb_autor(
	id INTEGER PRIMARY KEY ASC,
	nombre TEXT(100) NOT NULL,
	pais TEXT(40) NOT NULL, 
	fecha NUMERIC NOT NULL DEFAULT (CURRENT_DATE),
	email TEXT(100),
	idioma TEXT(100) NOT NULL
);



CREATE TABLE IF NOT EXISTS tb_editorial(
	id INTEGER PRIMARY KEY ASC AUTOINCREMENT,
	nombre TEXT(100) NOT NULL,
	direccion TEXT(100) NOT NULL, 
	telefono TEXT(50), 
	email TEXT(50), 
	web TEXT(500)

);

CREATE TABLE IF NOT EXISTS tb_traductor(
	id INTEGER PRIMARY KEY ASC AUTOINCREMENT,
	nombre TEXT(100) NOT NULL,
	idioma_origen TEXT(100) NOT NULL, 
	idioma_destino TEXT(50) NOT NULL, 
	email TEXT(50)
);

CREATE TABLE IF NOT EXISTS tb_calificacion(
	id INTEGER PRIMARY KEY ASC AUTOINCREMENT,
	valor REAL,
	comentario TEXT(100), 
	fecha INTEGER DEFAULT DATE,
	isbn INTEGER REFERENCES tb_libro(isbn) ON DELETE CASCADE ON UPDATE CASCADE   
);

CREATE TABLE IF NOT EXISTS tb_libro(
	isbn INTEGER PRIMARY KEY ASC,
	titulo TEXT(50) NOT NULL,
	formato TEXT(30) NOT NULL,
	paginas INTEGER ,
	año INTEGER NOT NULL,
	votos INTEGER NOT NULL,
	editorial INTEGER REFERENCES tb_editorial (id) ON DELETE CASCADE ON UPDATE CASCADE NOT NULL  
);

DROP TABLE tb_libro;

CREATE TABLE IF NOT EXISTS tb_autor_libro(
	isbn_libro INTEGER REFERENCES tb_libro (isbn) ON DELETE CASCADE ON UPDATE CASCADE ,
	id_autor INTEGER REFERENCES tb_autor (id) ON DELETE CASCADE ON UPDATE CASCADE,
	categoria TEXT(30), 
	sinopsis TEXT(5000),
	PRIMARY KEY (
	isbn_libro ASC,
	id_autor ASC
	)
);

CREATE TABLE IF NOT EXISTS tb_traductor_libro(
	isbn_libro INTEGER REFERENCES tb_libro (isbn) ON DELETE CASCADE ON UPDATE CASCADE ,
	id_traductor INTEGER REFERENCES tb_traductor (id) ON DELETE CASCADE ON UPDATE CASCADE,
	rol TEXT(100), 
	fecha_entrega INTEGER DEFAULT DATE,
	nota TEXT(500),
	PRIMARY KEY (
	isbn_libro ASC,
	id_traductor ASC
	)
);

-- verificaicon de DATA

SELECT * FROM tb_libro;

SELECT * FROM tb_editorial;

SELECT * FROM tb_calificacion;

SELECT * FROM tb_autor_libro;

SELECT * FROM tb_traductor_libro;

SELECT * FROM tb_traductor;

SELECT * FROM tb_autor;

-- promediode alificacion de cada libro

SELECT 
    c.isbn, 
    l.titulo, 
    AVG(c.valor) AS calificacion_promedio
FROM 
    tb_calificacion c
JOIN 
    tb_libro l ON c.isbn = l.isbn
GROUP BY 
    c.isbn, l.titulo;
	
-- consultar libro y nombre de autor 

SELECT 
    l.titulo, 
    a.nombre AS autor
FROM 
    tb_libro l
JOIN 
    tb_autor_libro al ON l.isbn = al.isbn_libro
JOIN 
    tb_autor a ON al.id_autor = a.id
GROUP BY 
    l.titulo, a.nombre;
	
--calificaciones superiores a 4.0
	
SELECT 
    c.isbn, 
    l.titulo, 
    AVG(c.valor) AS calificacion_promedio
FROM 
    tb_calificacion c
JOIN 
    tb_libro l ON c.isbn = l.isbn
GROUP BY 
    c.isbn, l.titulo
HAVING 
    AVG(c.valor) &gt;= 4.0;
	
	
	
--------------------------------------------------------------------

-- SUBCONSULTAS

	
-- 1. Libros publicados por MacLehose Press, con ID predefinido
	
	--consulto cual es el id por que no lo se en el momento 
SELECT id 
FROM tb_editorial
WHERE nombre = &quot;MacLehose Press&quot; ;

	--realizo consulta sabiendo el id predefinido
SELECT titulo 
FROM tb_libro 
WHERE editorial = 4; 


-- 2. Libros publicados por MacLehose Press, con consulta anidada
	
SELECT titulo 
FROM tb_libro 
WHERE editorial = (
    SELECT id 
    FROM tb_editorial 
    WHERE nombre = 'MacLehose Press'
);

-- 3. Calificaciones de &quot;En memoria de la memoria&quot;

	--se busco con el nombre en ingles puesto que la data esta en ingles por lo tanto el nombre a buscar es : In memory of memory
SELECT valor, comentario  
FROM tb_calificacion  
WHERE isbn = (
    SELECT isbn  
    FROM tb_libro  
    WHERE titulo = 'In Memory of Memory'
);
	
	--otra forma de buscar sin importar si esta en mayusculas o minusculas 

SELECT valor, comentario  
FROM tb_calificacion  
WHERE isbn = (
    SELECT isbn  
    FROM tb_libro  
    WHERE LOWER(titulo) = LOWER('IN MEMORY of Memory')
);


-- 4. Calificación promedio de &quot;En memoria de la memoria&quot;


SELECT AVG(valor) AS promedio 
FROM tb_calificacion 
WHERE isbn = (
    SELECT isbn 
    FROM tb_libro 
    WHERE titulo = 'In Memory of Memory'
);


-- 5. Autor de &quot;La fiesta de cumpleaños&quot;

SELECT a.nombre 
FROM tb_autor a
JOIN tb_autor_libro al ON a.id = al.id_autor
WHERE al.isbn_libro = (
    SELECT isbn 
    FROM tb_libro 
    WHERE titulo = 'The Birthday Party'
);

--6. Libros de Fernanda Melchor usando IN

SELECT titulo 
FROM tb_libro 
WHERE isbn IN (
    SELECT isbn_libro 
    FROM tb_autor_libro 
    WHERE id_autor IN (
        SELECT id 
        FROM tb_autor 
        WHERE nombre = 'Fernanda Melchor'
    )
);

--7. Libros por varios autores (ej: Fernanda Melchor, Samanta Schweblin) usando IN

SELECT titulo 
FROM tb_libro 
WHERE isbn IN (
    SELECT isbn_libro 
    FROM tb_autor_libro 
    WHERE id_autor IN (
        SELECT id 
        FROM tb_autor 
        WHERE nombre IN ('Fernanda Melchor', 'Samanta Schweblin')
    )
);


-------------------------------------------------------------------------------------

--OPERACIONES CON CONJUNTOS 

	-- UNION (combina autores y traductores)

--1. Autores etiquetados como autores

SELECT nombre, 'autor' AS rol FROM tb_autor;

-- 2. Traductores etiquetados como traductores

SELECT nombre, 'traductor' AS rol FROM tb_traductor

-- 3. UNION de ambos

SELECT nombre, 'autor' AS rol FROM tb_autor
UNION
SELECT nombre, 'traductor' AS rol FROM tb_traductor;

	--INTERSECT (requiere nombres únicos)

-- 1. Autores que también son traductores

	--en este caso no existe ninguno en la data actual, lo mejor seria insertar registros nuevos con ambos roles

SELECT nombre FROM tb_autor
INTERSECT
SELECT nombre FROM tb_traductor;

--2. Libros traducidos por Sophie Hughes


SELECT l.titulo 
FROM tb_libro l
JOIN tb_traductor_libro tl ON l.isbn = tl.isbn_libro
JOIN tb_traductor t ON t.id = tl.id_traductor
WHERE t.nombre = 'Sophie Hughes';

--3. Libros traducidos por Margaret Jull Costa

SELECT l.isbn ,l.titulo, t.nombre 
FROM tb_libro l
JOIN tb_traductor_libro tl ON l.isbn = tl.isbn_libro
JOIN tb_traductor t ON t.id = tl.id_traductor
WHERE t.nombre = 'Margaret Jull Costa';

	--Verificando en la DB no existe un libro traducido unicamente por Margaret Jull Costa 
	--por lo tanto usare una forma de buscar mas parcial dentro de la columna de nombre 
	SELECT l.isbn ,l.titulo, t.nombre
	FROM tb_libro l  
	JOIN tb_traductor_libro tl ON l.isbn = tl.isbn_libro  
	JOIN tb_traductor t ON t.id = tl.id_traductor  
	WHERE LOWER(t.nombre) LIKE '%margaret jull costa%';

	
--4. Intersección de libros traducidos por ambas

 -- para poder uasr intersect es necesario que esten en filas distintas pero en nuestra db estan en el mismo fila por lo tanto no seria util y conveniente 

SELECT titulo FROM (
    SELECT l.titulo 
    FROM tb_libro l
    JOIN tb_traductor_libro tl ON l.isbn = tl.isbn_libro
    JOIN tb_traductor t ON t.id = tl.id_traductor
    WHERE t.nombre = 'Sophie Hughes'
)
INTERSECT
SELECT titulo FROM (
    SELECT l.titulo 
    FROM tb_libro l
    JOIN tb_traductor_libro tl ON l.isbn = tl.isbn_libro
    JOIN tb_traductor t ON t.id = tl.id_traductor
    WHERE t.nombre = 'Margaret Jull Costa'
);

-- aqui lo realice de una manera que funciona pero iguialmente no es lo mas util 

SELECT titulo FROM (
    SELECT l.titulo  
    FROM tb_libro l  
    JOIN tb_traductor_libro tl ON l.isbn = tl.isbn_libro  
    JOIN tb_traductor t ON t.id = tl.id_traductor  
    WHERE LOWER(t.nombre) LIKE '%sophie hughes%'
)
INTERSECT
SELECT titulo FROM (
    SELECT l.titulo  
    FROM tb_libro l  
    JOIN tb_traductor_libro tl ON l.isbn = tl.isbn_libro  
    JOIN tb_traductor t ON t.id = tl.id_traductor  
    WHERE LOWER(t.nombre) LIKE '%margaret jull costa%'
);

-- por lo tanto lo hare con un script distinto a INTERSECT

SELECT l.titulo
FROM tb_libro l
JOIN tb_traductor_libro tl ON l.isbn = tl.isbn_libro
JOIN tb_traductor t ON t.id = tl.id_traductor
WHERE LOWER(t.nombre) LIKE '%sophie hughes%'
  AND LOWER(t.nombre) LIKE '%margaret jull costa%';

 -------------------------------------------------------------------------------
 
 -- EXCEPT
 
 --1. Traductores que no son autores 
 
	-- en este caso como la db los autores son distintos a los traductores llos tarera todos 

SELECT nombre FROM tb_traductor
EXCEPT
SELECT nombre FROM tb_autor;










</sql><current_tab id="0"/></tab_sql></sqlb_project>
